from Handlers.communication_handler import start_communication
from Utils.keyboard import get_main_keyboard


# –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –ø—Ä–æ—Ü–µ—Å—Å –æ–±—â–µ–Ω–∏—è —Å –ò–ò
async def conversation_loop(bot, message, user_service, openai):
    # –ó–¥–µ—Å—å –º—ã –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤–≤–µ–ª –ª–∏ —é–∑–µ—Ä —Å–ª–æ–≤–æ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –∑–∞–≤–µ—Ä—â–∞–µ—Ç—Å—è —Ü–∏–∫–ª —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
    # if message.text.strip().lower() == '–ø–æ–∫–∞':
    #     await user_service.update_state(message.chat.id, 'no_state')
    #     await bot.send_message(message.chat.id, "–ü–æ–∫–∞! –ù–∞–¥–µ—é—Å—å, –º—ã –µ—â–µ –ø–æ–æ–±—â–∞–µ–º—Å—è üêß")

    try:
        user = await user_service.get_user(message.chat.id)
        users_credits = user['credits']
        if users_credits <= 0:
            markup = get_main_keyboard()
            await bot.send_message(message.chat.id,
                                   '–ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫—É–ø–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø–∞–∫–µ—Ç–æ–≤',
                                   reply_markup=markup)
            await user_service.update_state(message.chat.id, "no_state")
            return

        await user_service.create_chat_history(chat_id=message.chat.id,
                                               role='user', message=message.text)

        await start_communication(bot, message, openai, user_service)
        user['credits'] -= 1
        await user_service.update_credits(message.chat.id, user['credits'])
    except ConnectionError:
        await bot.send_message(message.chat.id, '–ö–∞–∫–∏–µ-—Ç–æ –ø—Ä–æ–±–ª–µ–º—ã —Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ–º...')
        return
    except Exception:
        await bot.send_message(message.chat.id, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞...')
        return
